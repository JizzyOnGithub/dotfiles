#!/bin/sh

# example dkrc to provide a close-to-default setup and 
# show some basic command usage with error reporting

# determine where to place the log file
logfile="$HOME/.dkrc.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/dkrc.log"
: > "$logfile"

# load xbind for keybinds
xbindkeys &
/home/jizzy/.startup.sh &

# spawn a scratchpad terminal if not already (see sxhkdrc and rules for binds/setup)
# pgrep -f "st -c scratchpad" || st -c scratchpad &

{ # compound command to redirect all output

	# workspace settings
	# ------------------------

	# initialize 6 workspaces (1-6) (default: 1/monitor)
	dkcmd set numws=4

	# default workspace '_' values used when allocating new workspaces
	# can be applied to all existing workspaces when passed 'apply' after ws=_
	dkcmd set ws=_ apply layout=grid master=1 stack=3 gap=14 msplit=0.5 ssplit=0.5

	# use grid layout, padding, and gaps on last workspace
	# change workspace names (default: number == name -> 1:1, 2:2, 3:3....)
	# dkcmd set \
	# 	ws=1  name="edit" \
	# 	ws=2  name="web" \
	# 	ws=3  name="ðŸ˜€" \
	# 	ws=4  name="ðŸ˜ " \
	# 	ws=5  name="5" \
	# 	ws=6  name="6" \

	# enable static workspaces assigned to monitors (relevant for multiple monitors)
	#   aside -
	#     If you come from this workspace model, try embracing the default behaviour
	#     and access to all workspaces from any monitor, you might end up liking it :)
	#
	# this could be done in the names section above if being used
	#
	mon1='HDMI-0'
	mon2='HDMI1'
	dkcmd set static_ws=true \
	 	ws=1  mon=$mon1 \
	 	ws=2  mon=$mon1 \
	 	ws=3  mon=$mon2 \
	 	ws=4  mon=$mon2 \


	# global settings
	# ---------------------

	# focus windows when receiving activation and enable focus-follows-mouse
	dkcmd set focus_open=true focus_urgent=false focus_mouse=true

	# place clients at the tail and ignore size hints on tiled windows
	dkcmd set tile_tohead=0 tile_hints=true

	# minimum width/height for resizing, and minimum allowed on-screen when moving
	dkcmd set win_minwh=50 win_minxy=10

	# disable gaps and borders in single window layouts
	dkcmd set smart_gap=false smart_border=false

	# define mouse mod and move/resize buttons
	dkcmd set mouse mod=alt move=button1 resize=button3

	# obey motif border hints on windows that draw their own (steam, easyeffects, etc.)
	dkcmd set obey_motif=true


	# borders
	# ---------

	# traditional
	# set border width and colour for each window state
	# dkcmd set border width=$border_width colour focus='#6699cc' unfocus='#000000' urgent='#ee5555'

	# alternative
	# enable split borders and colours, width is overall width, outer_width consumes some of width.
	# outer_width must be less than width, outer_width of 0 will be single borders
	dkcmd set border width=5 outer_width=0 \
		colour \
		focus='#FFFFFF' \
		unfocus='#404040' \
		urgent='#FF6666' \
		outer_focus='#222222' \
		outer_unfocus='#222222' \
		outer_urgent='#222222'


	# window rules
	# --------------

	# rule class, instance, and title regex are *always* case INSENSITIVE

	# open window(s) on a specific workspace (assigned monitor)
	# dkcmd rule class="^gimp$" ws=2

	# open window(s) on a monitor by number or name (active workspace on monitor)
	# dkcmd rule class="^chromium$" mon="HDMI-A-0"

	# open window(s) and use a callback function (user defined in config.h)
	# we also ignore_cfg=true to stop the window from being resized on it's own from events
	# eg. mpv --x11-name=albumart /path/to/media
	# dkcmd rule class="^mpv$" instance="^albumart$" float=true ignore_cfg=true callback=albumart bw=0

	# open window(s) in a floating state
	dkcmd rule class="^(pavucontrol|transmission-gtk|lxappearance|wine)$" float=true

	# open window(s) with a specific geometry and coordinates (floating only!)
	# dkcmd rule class="^google-chrome$" title="^open files$" float=true w=1280 h=720

	# open window(s) with ignore_msg=true to avoid focus being grabbed and changing workspace
	# dkcmd rule class="^TelegramDesktop$" ignore_msg=true

	# define some terminals and allow them to be absorbed by spawned windows
	dkcmd rule class="^(st|st-256color|urxvt|kitty|alacritty|xterm|xterm-256color)$" terminal=false

	# set a window to never absorb other windows, like the xev event tester
	dkcmd rule title="^Event Tester$" no_absorb=true
	dkcmd rule title="^osu.exe$" float=true
	dkcmd rule class="^winecfg.exe$" float=true 
	dkcmd rule class "^BlackOps3.exe" float=true
	dkcmd rule class="^(anime-game-launcher|GenshinImpact.exe)$" float=true
	dkcmd rule class="^(Eww|eww)$" float=true ignore_cfg=true
	dkcmd rule class="^(xob)$" float=true ignore_cfg=true

	# send a window to the scratchpad
	dkcmd rule class="^scratchpad$" scratch=true

	# focus window and workspace on opening
	# dkcmd rule class="^firefox$" ws=1 focus=true

	# update or remove an existing rule with the same match patterns
	# dkcmd rule class="^firefox$" mon="HDMI-A-0"
	# dkcmd rule remove class="^firefox$"

	# apply current rule set to all existing windows (used mainly for WM restart)
	dkcmd rule apply '*'

	# delete all rules
	# dkcmd rule remove '*'

} >> "$logfile" 2>&1 # append responses

# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "dkrc has errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); gsub(/</, "\<"); print}' "$logfile")"
	exit 1
fi

exit 0
